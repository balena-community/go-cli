name: Build

on:
  push:
    tags:
      - "*.*.*"
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: balena-labs-research/balena-go

jobs:
  build:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job_name: ['linux', 'linux_386', 'mac_amd64', 'mac_arm64', 'windows']

        include:
          - job_name: linux
            os: ubuntu-latest
            go: '1.19.6'
            filename: balena_go_linux_x86_64

          - job_name: linux_386
            os: ubuntu-latest
            go: '1.19.6'
            filename: balena_go_linux_386

          - job_name: mac_amd64
            os: macos-latest
            go: '1.19.6'
            filename: balena_go_mac_amd64

          - job_name: mac_arm64
            os: macos-latest
            go: '1.19.6'
            filename: balena_go_mac_arm64

          - job_name: windows
            os: windows-latest
            go: '1.19.6'
            filename: balena_go_windows

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
          check-latest: false

      - name: Install Libraries on Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: | # Install required packages for Arpscan building
          sudo apt-get install libpcap-dev -y

      - name: Install Libraries on macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo none

      - name: Install Libraries on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo none

      - name: Print Go version and environment
        shell: bash
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          go env
          echo "Note: env variables passed in Makefiles override these env vars."

      - name: Run tests for windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          make test

      - name: Run tests for macos
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          sudo make test

      - name: Run tests for ubuntu
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          export GO_SETUP_PATH=$(which go)
          sudo CGO_ENABLED=1 "$GO_SETUP_PATH" test -ldflags '-w -s' ./...

      - name: Build
        shell: bash
        run: |
          make dist
          mkdir releases
          tar -czf releases/${{ matrix.filename }}.tar.gz ./dist/*

      - name: Upload file
        uses: actions/upload-artifact@v3
        with:
            name: artifacts
            path: releases/

  deploy-to-ghcr:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create_release:
      if: startsWith(github.ref, 'refs/tags/')
      needs: [build, deploy-to-ghcr]
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
        - name: Download all workflow run artifacts
          uses: actions/download-artifact@v3

        - name: Create production changeLog and release with the artifacts
          uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
          with:
            generate_release_notes: true
            files: |
              artifacts/*
